ALCUNE DOMANDE FONDAMENTALI
    - che istruzioni può eseguire un elaboratore?
    - perchè proprio quelle?
    - cosa vuol dire che un elaboratore è potente?
    - quali problemi si possono risolvere? 
    - CONTA IL LINGUAGGIO DI PROGRAMMAZIONE IN TUTTO QUESTO?

ALGORITMI E PROGRAMMI
Un'algoritmo è una sequenza FINITA di mosse che risolve in un tempo FINITO una classe di problemi. La codifica di un algoritmo è una descrizione tramite un insieme ordinato
di frasi (istruzioni) di un linguaggio di programmazione, che specificano le azioni da svolgere.

Infine, un programma è un testo scritto in accordo alla sintassi e alla semantica di un linguaggio di programmazione.

NB: un programma può essere NON finito -> un programma NON è necessariamente un algoritmo. (server, sistemi operativi). Quando parliamo di problemi da risolvere parliamo
di algoritmi. Ci aspettiamo una risposta! (in un tempo finito)

--- AUTOMA ESECUTORE
    - L'algoritmo esprime la soluzione a un problema.
    - Un programma è la formulazione testuale di un algoritmo in un dato LINGUAGGIO di programmazione
    - L'ESECUZIONE delle azioni specificate dall'algoritmo, nell'ordine da esso specificato, porta a ottenere, a partire dai dati di ingresso, la soluzione del problema.

Deve esistere qualcosa che è in grado di eseguire delle azioni (fornite da qualcun'altro) che in tempo finito, a partire dai dati d'ingresso, restituisce la soluzione
del problema. In altri termini deve esistere qualcosa capace di eseguire le azioni dell’algoritmo. L'idea di fondo è che non voglio eseguire io, essere umano, i passi
dell'algoritmo a mano.

DEF Automa esecutore: sinonimo di macchina ASTRATTA esecutrice di algoritmi (tipo Von Neumann).

Che caratteristiche deve avere tale automa?
    -> deve ricevere dall’esterno una descrizione dell’algoritmo. (programma)
        -> Ma poiché una descrizione è una frase di un LINGUAGGIO
            -> l'automa esecutore deve essere capace di INTERPRETARE un LINGUAGGIO! -> LINGUAGGIO MACCHINA

VINCOLI DI REALiZZABILITà FISICA
    - se l’automa è fatto di parti, esse sono in numero finito
    - di conseguenza, ingresso e uscita devono essere denotabili attraverso un insieme FINITO di simboli
NB: i simboli fisicamente possono avere le forme più disparate. lettere, suoni, tocchi, ...

COMPUTABILITà
Formalizzando cosa sia l'automa esecutore si arriva a definire il concetto stesso di computabilità (in pratica, computabilità -> sinonimo di elaborazione)

Vari approcci per questa definizione, noi useremo l'approccio a gerarchia di macchine astratte. Macchine sempre più complicate fino a che non sbatto contro l'upper bound dei
problemi non risolvibili (dalle macchine, umani riescono)

--- GERARCHIA DI MACCHINE ASTRATTEù
Perché definire una gerarchia ?
    - Macchine diverse potrebbero avere (e in effetti hanno..) diversa capacità di risolvere problemi
        -> e noi vogliamo scegliere quella più adatta
    - Se neanche la macchina più "potente" riesce a risolvere un dato problema, esso potrebbe essere non risolubile
        -> e se è così, vogliamo saperlo!

MACCHINA BASE (RETE COMBINATORIA)
Definita dalla tripla <I, O, mfn>. Con:
    - I = insieme FINITO dei simboli in ingresso
    - O = insieme FINITO dei simboli in uscita
    - mfn:I→O = (machine function) tabella di verità 

Limite computazionale: molti problemi hanno bisogno di sapere della storia passata (stato). Pensa a cassaforte con rotellina per aprirla, mi devo ricordare dei caratteri
immessi prima.

AUTOMA A STATI FINITI
Il modo più semplice per introdurre un'idea di "memoria" è definire un automa con un numero FINITO di stati interni. 

Un automa a stati finiti è definito dalla quintupla <I, O, S, mfn, sfn>:
    - I = insieme finito dei simboli di ingresso
    - O = insieme finito dei simboli di uscita
    - S = insieme finito degli stati
    - mfn: IxS → O (funzione di macchina)
    - sfn: IxS → S (funzione di stato)

Poiché lo stato funge da memoria interna, le risposte possono essere diverse anche a parità di dati d’ingresso.

Limite computazionale: stati FINITI. Il numero di stati è congelato una volta definito l'automa. Alcuni problemi hanno bisogno di più dinamicità.
    -> esempio: bilanciamento delle parentesi, il numero di stati viene definito in base ad ogni ingresso.
Vanno bene per i problemi in cui riesco a trovare il numero massimo di stati necessario.

MACCHINA DI TURING
Stati infiniti (o meglio illimitatamente espandibili) non ci stanno dentro la macchina, mettiamoli fuori!
    -> idea di nastro (infinitamente espandibile) come supporto per la memoria. La macchina si può muovere sul nastro.
Per superare il limite della memoria finita, si introduce un “nastro” come supporto di memorizzazione esterno. 

La macchina di Turing è quindi definita dalla quintupla: <A, S, mfn, sfn, dfn> dove:
    - A = insieme finito dei simboli di ingresso e uscita
    - S = insieme finito degli stati (uno dei quali è HALT)
    - mfn: AxS → A (funzione di macchina)
    - sfn: AxS → S (funzione di stato)
    - dfn: AxS → D = {Left,Right,None} (funz. di direzione)
NB: Input e output hanno lo stesso alfabeto (A) dato che quello che scrivi lo vuoi anche saper leggere e viceversa.

FUNZIONAMENTO DELLA MACCHINA DI TURING
La macchina di turing è, in sostanza, una macchina a stati finiti con in aggiunta il nastro. Il nastro illimitatamente espandibile rappresenta il deposito dei dati (memoria).
La macchina è munita di una testina di lettura / scrittura e può:
    - Leggere un simbolo dal nastro
    - Scrivere sul nastro il simbolo specificato da mfn()
    - Transitare in un nuovo stato interno specificato da sfn()
    - Spostarsi sul nastro di una posizione nella direzione indicata da dfn()
IPOTESI: quando raggiunge lo stato HALT, la macchina si ferma.

Risolvere un problema con questa macchina richiede di:
    - definire la rappresentazione dei dati di partenza da porre inizialmente sul nastro e di quelli di uscita che ci si aspetta di trovare alla fine sul nastro.
    - definire il comportamento, ossia le tre funzioni: mfn(), sfn() e dfn(), concepite in modo da lasciare sul nastro la soluzione quando alla fine la macchina si ferma.

La definizione dice che quando alla fine la macchina si ferma, sul nastro c'è la soluzione del problema, altrimenti, c'è stato un errore di programmazione.

MA... è certo che prima o poi si fermi? In realtà, NO: come vedremo, è possibile che il comportamento definito dalle tre funzioni causi un ciclo infinito!
Non fermarsi, entrando in loop, implica che la macchina potrebbe non rispondere mai più. Cosa significa? vedremo che un problema non risolvibile è un problema per cui la
macchina di turing va in loop.

NB: la capacità di andare in loop è l'ipotesi fondamentale per risolvere la classe maggiore di problemi possibile. Una macchina che non va in loop è per sua natura meno
potente.
NB_2: La macchina di Turing ha una capacità di movimento senza vincoli, posso andare dove voglio -> Nastro = RAM, memoria ad accesso casuale.

PROGRAMMARE LA MACCHINA DI TURING
Programmare un algoritmo sulla macchina di Turing significa definire le tre funzioni mfn, sfn, dfn.

Poiché hanno lo stesso dominio AxS
    - A = insieme finito dei simboli di ingresso e uscita
    - S = insieme finito degli stati (di cui uno è HALT)
dove A e S sono insiemi finiti, gli algoritmi possono essere facilmente definite in forma tabellare.

DOMANDE FONDAMENTALI
    1. Esiste sempre una opportuna Macchina di Turing capace di risolvere qualunque problema?
        • oppure esistono problemi che nessuna MdT può risolvere?
    2. Esistono macchine “più potenti” della MdT?
        • se esistono, vorremmo trovarle!
        • se non esistono, dobbiamo sapere "fin dove ci si può spingere" con ciò di cui disponiamo

TESI DI CHURCH-TURING (risposta alla domanda 2)
Non esiste alcun formalismo capace di risolvere una classe di problemi più ampia di quella risolta dalla Macchina di Turing. (non un teorema, non dimostrata ma neanche 
mai confutata)

Dunque, la MdT è l'arma più potente del nostro arsenale.
NB: la macchina di Turing definisce i limiti INTRINSECI di ciò che puoi chiedere ad una macchina (a meno che non venga scoperta una macchina più potente)

Ma non sempre serve l'arma finale…
---
PDA (PUSH DOWN AUTOMATON)
Non sempre è necessaria una Macchina di Turing
    - per alcune categorie di problemi di grande interesse pratico può bastare un modello di memoria più limitato
    - il Push Down Automaton (PDA), ad esempio, prevede un "nastro" espandibile da una parte sola, col vincolo di poter accedere solo alla cella "al top". (stack)
    
Il PDA porta ad un modo di lavorare efficente, ma non tutti i problemi si possono risolvere con questo automa. Quelli che ci riescono però guadagnano molto di efficienza. 